<?php

namespace Proxies\__CG__\PartKeepr\Footprint;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class FootprintImage extends \PartKeepr\Footprint\FootprintImage implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setFootprint(\PartKeepr\Footprint\Footprint $footprint)
    {
        $this->__load();
        return parent::setFootprint($footprint);
    }

    public function getFootprint()
    {
        $this->__load();
        return parent::getFootprint();
    }

    public function serialize()
    {
        $this->__load();
        return parent::serialize();
    }

    public function getRenderer()
    {
        $this->__load();
        return parent::getRenderer();
    }

    public function replace($path)
    {
        $this->__load();
        return parent::replace($path);
    }

    public function getFilename()
    {
        $this->__load();
        return parent::getFilename();
    }

    public function getFilePath()
    {
        $this->__load();
        return parent::getFilePath();
    }

    public function ensureCachedirExists()
    {
        $this->__load();
        return parent::ensureCachedirExists();
    }

    public function fitWithin($w, $h, $padding = false)
    {
        $this->__load();
        return parent::fitWithin($w, $h, $padding);
    }

    public function fitWithinPadding($w, $h)
    {
        $this->__load();
        return parent::fitWithinPadding($w, $h);
    }

    public function fitWithinExact($w, $h)
    {
        $this->__load();
        return parent::fitWithinExact($w, $h);
    }

    public function scaleTo($w, $h)
    {
        $this->__load();
        return parent::scaleTo($w, $h);
    }

    public function replaceFromTemporaryFile($id)
    {
        $this->__load();
        return parent::replaceFromTemporaryFile($id);
    }

    public function getOriginalFilename()
    {
        $this->__load();
        return parent::getOriginalFilename();
    }

    public function setOriginalFilename($filename)
    {
        $this->__load();
        return parent::setOriginalFilename($filename);
    }

    public function replaceFromURL($url)
    {
        $this->__load();
        return parent::replaceFromURL($url);
    }

    public function getSize()
    {
        $this->__load();
        return parent::getSize();
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function getPlainFilename()
    {
        $this->__load();
        return parent::getPlainFilename();
    }

    public function getMimeType()
    {
        $this->__load();
        return parent::getMimeType();
    }

    public function getExtension()
    {
        $this->__load();
        return parent::getExtension();
    }

    public function ensureFilePathExists()
    {
        $this->__load();
        return parent::ensureFilePathExists();
    }

    public function checkPermissions()
    {
        $this->__load();
        return parent::checkPermissions();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function deserializeChildren(array $sourceArray, \Doctrine\Common\Collections\Collection $collection, $entityClass)
    {
        $this->__load();
        return parent::deserializeChildren($sourceArray, $collection, $entityClass);
    }

    public function serializeChildren(\Doctrine\Common\Collections\Collection $array)
    {
        $this->__load();
        return parent::serializeChildren($array);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'type', 'filename', 'originalname', 'mimetype', 'size', 'footprint');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}