<?php

namespace Proxies\__CG__\PartKeepr\Part;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PartDistributor extends \PartKeepr\Part\PartDistributor implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setPackagingUnit($packagingUnit)
    {
        $this->__load();
        return parent::setPackagingUnit($packagingUnit);
    }

    public function getPackagingUnit()
    {
        $this->__load();
        return parent::getPackagingUnit();
    }

    public function setPart(\PartKeepr\Part\Part $part)
    {
        $this->__load();
        return parent::setPart($part);
    }

    public function getPart()
    {
        $this->__load();
        return parent::getPart();
    }

    public function setDistributor(\PartKeepr\Distributor\Distributor $distributor)
    {
        $this->__load();
        return parent::setDistributor($distributor);
    }

    public function getDistributor()
    {
        $this->__load();
        return parent::getDistributor();
    }

    public function setOrderNumber($orderNumber)
    {
        $this->__load();
        return parent::setOrderNumber($orderNumber);
    }

    public function getOrderNumber()
    {
        $this->__load();
        return parent::getOrderNumber();
    }

    public function setPrice($price)
    {
        $this->__load();
        return parent::setPrice($price);
    }

    public function getPrice()
    {
        $this->__load();
        return parent::getPrice();
    }

    public function setSKU($sku)
    {
        $this->__load();
        return parent::setSKU($sku);
    }

    public function getSKU()
    {
        $this->__load();
        return parent::getSKU();
    }

    public function serialize()
    {
        $this->__load();
        return parent::serialize();
    }

    public function deserialize(array $parameters)
    {
        $this->__load();
        return parent::deserialize($parameters);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function deserializeChildren(array $sourceArray, \Doctrine\Common\Collections\Collection $collection, $entityClass)
    {
        $this->__load();
        return parent::deserializeChildren($sourceArray, $collection, $entityClass);
    }

    public function serializeChildren(\Doctrine\Common\Collections\Collection $array)
    {
        $this->__load();
        return parent::serializeChildren($array);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'orderNumber', 'packagingUnit', 'price', 'sku', 'part', 'distributor');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}