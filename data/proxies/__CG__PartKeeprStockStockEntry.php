<?php

namespace Proxies\__CG__\PartKeepr\Stock;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class StockEntry extends \PartKeepr\Stock\StockEntry implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getDateTime()
    {
        $this->__load();
        return parent::getDateTime();
    }

    public function setCorrection($bCorrection)
    {
        $this->__load();
        return parent::setCorrection($bCorrection);
    }

    public function getCorrection()
    {
        $this->__load();
        return parent::getCorrection();
    }

    public function setPrice($price)
    {
        $this->__load();
        return parent::setPrice($price);
    }

    public function getPrice()
    {
        $this->__load();
        return parent::getPrice();
    }

    public function setStockLevel($stockLevel)
    {
        $this->__load();
        return parent::setStockLevel($stockLevel);
    }

    public function getStockLevel()
    {
        $this->__load();
        return parent::getStockLevel();
    }

    public function setPart(\PartKeepr\Part\Part $part)
    {
        $this->__load();
        return parent::setPart($part);
    }

    public function getPart()
    {
        $this->__load();
        return parent::getPart();
    }

    public function setUser(\PartKeepr\User\User $user = NULL)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function checkPrice()
    {
        $this->__load();
        return parent::checkPrice();
    }

    public function postPersist()
    {
        $this->__load();
        return parent::postPersist();
    }

    public function isRemoval()
    {
        $this->__load();
        return parent::isRemoval();
    }

    public function setComment($comment)
    {
        $this->__load();
        return parent::setComment($comment);
    }

    public function getComment()
    {
        $this->__load();
        return parent::getComment();
    }

    public function serialize()
    {
        $this->__load();
        return parent::serialize();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function deserializeChildren(array $sourceArray, \Doctrine\Common\Collections\Collection $collection, $entityClass)
    {
        $this->__load();
        return parent::deserializeChildren($sourceArray, $collection, $entityClass);
    }

    public function serializeChildren(\Doctrine\Common\Collections\Collection $array)
    {
        $this->__load();
        return parent::serializeChildren($array);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'stockLevel', 'price', 'dateTime', 'correction', 'comment', 'part', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}